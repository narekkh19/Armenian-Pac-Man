#include "Map.h"
#include "Ghost/Blinky.h"
#include "Ghost/Pinky.h"
#include "Ghost/Inky.h"
#include "Ghost/Clyde.h"
#include <cmath>

Map::Map() : pac(), block(), meal(), hresh{}, pacmanScore() {
    hresh.push_back(new Blinky(11, 30));
    hresh.push_back(new Pinky(11, 31));
    hresh.push_back(new Inky(11, 32));
    hresh.push_back(new Clyde(11, 33));
}


void Map::loadLevel() {
 level = {
    {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}, // Row 0
    {2,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2}, // Row 1
    {2,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2}, // Row 2
    {2,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0,0,3,3,3,3,3,0,3,3,3,3,0,3,3,3,3,0,0,3,0,3,2}, // Row 3
    {2,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,0,3,0,0,0,0,3,0,0,3,0,3,0,0,0,0,3,3,0,3,2}, // Row 4
    {2,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,3,0,0,3,3,3,3,0,3,3,3,0,0,6,3,3,3,3,0,3,0,3,2}, // Row 5
    {2,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,3,0,0,3,0,0,0,0,3,0,0,3,0,3,0,0,0,0,0,3,0,3,2}, // Row 6
    {2,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,7,3,0,0,3,3,3,3,0,3,0,0,3,0,3,3,3,3,0,0,3,0,3,2}, // Row 7
    {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2}, // Row 8
    {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2}, // Row 9
    {2,0,0,3,3,3,0,0,0,7,0,0,0,0,0,0,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}, // Row 10
    {2,0,0,3,6,3,0,0,0,7,0,0,0,0,0,7,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}, // Row 11
    {2,0,0,3,3,3,0,0,0,7,0,0,0,0,0,7,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,2}, // Row 12
    {2,7,7,7,7,7,7,7,7,7,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}, // Row 13
    {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}, // Row 14
    {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}, // Row 15
    {2,3,0,3,0,0,3,0,0,0,0,0,0,0,0,0,3,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,2}, // Row 16
    {2,3,0,3,0,0,3,0,0,0,0,0,0,0,0,0,3,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,2}, // Row 17
    {2,3,0,3,0,0,3,0,0,6,0,0,0,0,0,0,3,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,2}, // Row 18
    {2,3,0,3,0,0,3,0,0,3,3,0,0,0,3,3,3,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,2}, // Row 19
    {2,3,0,3,0,0,3,0,0,3,3,0,0,0,3,3,3,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,3,3,2}, // Row 20
    {2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2}, // Row 21
    {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}  // Row 22
    };
    // {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}, // Row 0
    // {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}, // Row 1
    // {2,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}, // Row 2
    // {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}, // Row 3
    // {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}, // Row 4
    // {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}, // Row 5
    // {2,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}, // Row 6
    // {2,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}, // Row 7
    // {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}, // Row 8
    // {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}, // Row 9
    // {2,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}, // Row 10
    // {2,0,0,0,0,0,0,0,0,7,0,0,0,0,0,7,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}, // Row 11
    // {2,0,0,0,0,0,0,0,0,7,0,0,0,0,0,7,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,2}, // Row 12
    // {2,0,7,7,7,7,7,7,7,7,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}, // Row 13
    // {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}, // Row 14
    // {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}, // Row 15
    // {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}, // Row 16
    // {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}, // Row 17
    // {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}, // Row 18
    // {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}, // Row 19
    // {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}, // Row 20
    // {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}, // Row 21
    // {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}  // Row 22
// };

}

Pacman& Map::getPacman() {
    return pac;
}

Block& Map::getBlock() {
    return block;
}

Food& Map::getDram() {
    return meal;
}

bool Map::isBlock(const int i) const {
    if (i != static_cast<int>(GameIntities::Tuf)) {
        if (i != static_cast<int>(GameIntities::Avenue)) {
            if (i != static_cast<int>(GameIntities::NonVisibleBlock)) {
                    return false;
            }
        }
    } 
    return true;
}


std::vector<Ghost*>& Map::getGhost() {
    return hresh;
}

void Map::draw(sf::RenderWindow& window) {
    block.draw(window, GameIntities::Avenue, 1, 1);
    for (size_t i = 0; i < level.size(); ++i) {
        for (size_t j = 0; j < level[i].size(); ++j) {
            if (level[i][j] == 2) { 
                block.draw(window, GameIntities::Tuf, i, j);
            }
            else if (level[i][j] == 3) { 
                meal.draw(window, GameIntities::Food, i, j);
            }
            else if (level[i][j] == 6) {
                meal.draw(window, GameIntities::MegaFood, i, j);
            }
        }
    }

    pacmanScore.draw(window, getPacman().getScore());
}

void Map::checkGameResult(sf::RenderWindow& window) {
    sf::Vector2f pacmanPos = getPacman().getCurrPosition();
    for (auto* ghost : getGhost()) {
        sf::Vector2f ghostPos = ghost->getCurrPosition();
        sf::Vector2f result = pacmanPos - ghostPos;
        if (std::fabs(result.x) < tile_x / 3 && std::fabs(result.y) < tile_y / 3) {
            for (auto* ghost : getGhost()) ghost->setDontMove(true);
            getPacman().setDied(true);
            return;
        }
    }
    
    if (getPacman().getScore() / 1000 == winningScore) {
        for (auto* ghost : getGhost()) ghost->setDontMove(true);
        getPacman().setWin(true);
    }
}
